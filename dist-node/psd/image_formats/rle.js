// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = {
    parseRLE: function() {
      this.byteCounts = this.parseByteCounts();
      return this.parseChannelData();
    },
    parseByteCounts: function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.channels() * this.height(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.file.readShort());
      }
      return _results;
    },
    parseChannelData: function() {
      var i, _i, _ref, _results;
      this.chanPos = 0;
      this.lineIndex = 0;
      _results = [];
      for (i = _i = 0, _ref = this.channels(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.decodeRLEChannel();
        _results.push(this.lineIndex += this.height());
      }
      return _results;
    },
    decodeRLEChannel: function() {
      var byteCount, data, finish, j, len, val, _i, _ref, _results;
      _results = [];
      for (j = _i = 0, _ref = this.height(); 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        byteCount = this.byteCounts[this.lineIndex + j];
        finish = this.file.tell() + byteCount;
        _results.push((function() {
          var _results1;
          _results1 = [];
          while (this.file.tell() < finish) {
            len = this.file.read(1)[0];
            if (len < 128) {
              len += 1;
              data = this.file.read(len);
              this.channelData.set(data, this.chanPos);
              _results1.push(this.chanPos += len);
            } else if (len > 128) {
              len ^= 0xff;
              len += 2;
              val = this.file.read(1)[0];
              this.channelData.fill(val, this.chanPos, this.chanPos + len);
              _results1.push(this.chanPos += len);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    }
  };

}).call(this);
